from flask import Flask, request, render_template_string
import sqlite3
app = Flask(__name__)
@app.route('/')
def index():
# Home route that returns a welcome message
return 'Welcome to the secure Flask app!'
@app.route('/login', methods=['GET', 'POST'])
def login():
if request.method == 'POST':
# Get the username and password from the POST request
username = request.form['username']
password = request.form['password']
# SQL Injection Vulnerability: Directly embedding user inputs into SQL 
query
conn = sqlite3.connect('database.db')
cursor = conn.cursor()
# The following line is vulnerable to SQL injection attacks
query = f"SELECT * FROM users WHERE username='{username}' AND 
password='{password}'"
cursor.execute(query)
user = cursor.fetchone()
conn.close()
if user:
return 'Login successful'
else:
return 'Invalid credentials'
# Return the login form for GET requests
return '''
<form method="post">
Username: <input type="text" name="username"><br>
Password: <input type="password" name="password"><br>
<input type="submit" value="Login">
</form>
'''
@app.route('/search', methods=['GET'])
def search():
# Get the search query from the GET request
query = request.args.get('q')
# XSS Vulnerability: Directly embedding user input into HTML
# The following line is vulnerable to XSS attacks
results = f"<h1>Search Results for {query}</h1>"
return render_template_string(results)
if __name__ == '__main__':
# Run the Flask app in debug mode
app.run(debug=True)
